name: CELEC Flow Prediction - CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  
  # Manual trigger
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - prod

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: celec-flow-prediction
  ECS_CLUSTER: celec-flow-prediction-cluster
  ECS_SERVICE: celec-flow-prediction-mlflow-service
  
jobs:
  # Code Quality and Testing
  test:
    name: Run Tests and Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest flake8 black isort safety bandit
    
    - name: Code formatting check
      run: |
        black --check src/
        isort --check-only src/
    
    - name: Lint with flake8
      run: |
        flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Security check with bandit
      run: |
        bandit -r src/ -f json -o bandit-report.json || true
    
    - name: Check dependencies for security vulnerabilities
      run: |
        safety check --json --output safety-report.json || true
    
    - name: Run tests
      run: |
        python -m pytest tests/ -v --cov=src --cov-report=xml --cov-report=html
      continue-on-error: true
    
    - name: Test environment setup
      run: |
        python test_environment.py
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      with:
        name: test-results
        path: |
          bandit-report.json
          safety-report.json
          htmlcov/
          coverage.xml

  # Infrastructure Validation
  terraform-validate:
    name: Validate Terraform
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ~1.6
    
    - name: Terraform Format Check
      run: terraform fmt -check -recursive infrastructure/terraform/
    
    - name: Terraform Init
      run: |
        cd infrastructure/terraform
        terraform init -backend=false
    
    - name: Terraform Validate
      run: |
        cd infrastructure/terraform
        terraform validate
    
    - name: Terraform Plan (Dry Run)
      run: |
        cd infrastructure/terraform
        terraform plan -out=tfplan -input=false
      env:
        TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}

  # Docker Build and Security Scan
  docker-build:
    name: Build and Scan Docker Image
    runs-on: ubuntu-latest
    needs: [test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      run: |
        docker build -t $ECR_REPOSITORY:${{ github.sha }} .
        docker build -t $ECR_REPOSITORY:latest .
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ env.ECR_REPOSITORY }}:${{ github.sha }}'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Test Docker image
      run: |
        docker run --rm $ECR_REPOSITORY:${{ github.sha }} python test_environment.py

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, terraform-validate, docker-build]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ~1.6
    
    - name: Deploy Infrastructure
      run: |
        cd infrastructure/terraform
        terraform init
        terraform workspace select staging || terraform workspace new staging
        terraform plan -out=tfplan
        terraform apply tfplan
      env:
        TF_VAR_environment: staging
        TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
    
    - name: Build and push Docker image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }} .
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:staging .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }}
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:staging
    
    - name: Update ECS service
      run: |
        aws ecs update-service \
          --cluster $ECS_CLUSTER-staging \
          --service $ECS_SERVICE-staging \
          --force-new-deployment \
          --region $AWS_REGION

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, terraform-validate, docker-build]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ~1.6
    
    - name: Deploy Infrastructure
      run: |
        cd infrastructure/terraform
        terraform init
        terraform workspace select prod || terraform workspace new prod
        terraform plan -out=tfplan
        terraform apply tfplan
      env:
        TF_VAR_environment: prod
        TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
    
    - name: Build and push Docker image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }} .
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }}
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
    
    - name: Update ECS service
      run: |
        aws ecs update-service \
          --cluster $ECS_CLUSTER \
          --service $ECS_SERVICE \
          --force-new-deployment \
          --region $AWS_REGION
    
    - name: Wait for deployment to complete
      run: |
        aws ecs wait services-stable \
          --cluster $ECS_CLUSTER \
          --services $ECS_SERVICE \
          --region $AWS_REGION

  # Post-deployment tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Get service endpoint
      id: get-endpoint
      run: |
        LOAD_BALANCER_DNS=$(aws elbv2 describe-load-balancers \
          --names celec-flow-prediction-alb-staging \
          --query 'LoadBalancers[0].DNSName' \
          --output text \
          --region $AWS_REGION)
        echo "endpoint=http://$LOAD_BALANCER_DNS" >> $GITHUB_OUTPUT
    
    - name: Health check
      run: |
        curl -f ${{ steps.get-endpoint.outputs.endpoint }}/health || exit 1
    
    - name: MLflow API test
      run: |
        curl -f ${{ steps.get-endpoint.outputs.endpoint }}/api/2.0/mlflow/experiments/list || exit 1

  # Notification
  notify:
    name: Send Notification
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: Notify on success
      if: ${{ needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success' }}
      run: |
        echo "✅ Deployment successful!"
        # Add Slack/Teams notification here
    
    - name: Notify on failure
      if: ${{ needs.deploy-staging.result == 'failure' || needs.deploy-production.result == 'failure' }}
      run: |
        echo "❌ Deployment failed!"
        # Add Slack/Teams notification here